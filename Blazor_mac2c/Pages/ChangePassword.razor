
@page "/changepassword"
@using System.Globalization
@using System.Net.Http
@using Radzen
@using Radzen.Blazor
@using System.Linq.Dynamic.Core
@using Blazor_mac2c.Models
@using Blazor_mac2c.Endpoint
@using Blazor_mac2c.Contracts
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager
@inject NotificationService NotificationService
@inject IPageProgressService PageProgressService
@attribute [Authorize]
<h3>Change Password</h3>

@if (!response)
{
    <ErrorMessage Message="Something wrong with your form, please verifiy your token or email" />
}
<div class="container my-4"> 
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="ResetPasswordModel" Data=@model Submit=@ResetPasswordHandle>
                <RadzenFieldset Text="Please fill the form">
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenLabel Text="Email" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.UserName Class="w-100"/>
                            <RadzenRequiredValidator Component="Email" Text="Email is required" Popup="true" Style="position: absolute" />
                        </div>                        
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenLabel Text="Old password" />
                        </div>                        
                        <div class="col">
                          <RadzenPassword style="display: block" Name="Password" @bind-Value=@model.Password Class="w-100"/>
                          <RadzenRequiredValidator Component="Password" Text="Enter password" />
                        </div>                        
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                          <RadzenLabel Text="New password"/>
                        </div>
                        <div class="col">
                            <RadzenPassword style="display: block" Name="NewPassword" @bind-Value=@model.NewPassword Class="w-100"/>
                            <RadzenRequiredValidator Component="NewPassword" Text="Enter new password" />
                        </div>
                    </div>
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenLabel Text="Confirm new password" />
                        </div>
                        <div class="col">
                            <RadzenPassword style="display: block" Name="NewPasswordConfirm" @bind-Value=@model.NewPasswordConfirm Class="w-100"/>
                            <RadzenRequiredValidator Component="NewPasswordConfirm" Text="confirm your new password" />
                            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.NewPasswordConfirm)) Value=@model.NewPassword Component="NewPasswordConfirm" Text="Passwords should be the same" Popup="true" Style="position: absolute" />
                        </div>
                    </div>   
                    <div class="row mb-5">
                        <div class="col"></div>
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenButton  ButtonType="Radzen.ButtonType.Submit" BusyText="Invoking ..." IsBusy=@busy Text="Submit"Class="w-100"ButtonStyle="ButtonStyle.Info" />
                        </div>
                    </div>  
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>

@code {
    protected bool busy;
    protected bool response = true;
    ResetPasswordModel model = new ResetPasswordModel();
    protected async Task ResetPasswordHandle()
    {   
        busy = true;
        SetPageProgressIndeterminate();
        response = await _authRepo.ResetPassword(model);
        if (response)
        {
            NotificationMessage success = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = $"Password of {model.UserName} has been changed",
                    Detail = $"Password of {model.UserName} has been changed",
                    Duration = 4000
                };
            NotificationService.Notify(success);
            SetPageProgressHidden();
            NavigateToIndexPage();
        }
        else
        {
            NotificationMessage failure = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Something wrong when trying to reset password of {model.UserName} ",
                    Detail = $"Something wrong when trying to reset password of {model.UserName}, please verify your old password ",
                    Duration = 4000
                };
            NotificationService.Notify(failure);
            busy = false ;
            SetPageProgressHidden();
        }
    }
    protected void NavigateToIndexPage()
    {
            _navManager.NavigateTo("/");
    }
    #region loading
    protected Task SetPageProgressIndeterminate()
    {
        return PageProgressService.Go(null, options => { options.Color = Color.Warning; });
    }
    protected Task SetPageProgressHidden()
    {
        return PageProgressService.Go(-1);
    }
    #endregion
}