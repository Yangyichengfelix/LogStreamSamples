@page "/statusgroup"
@using System.Globalization
@using System.Net.Http
@using Radzen
@using Radzen.Blazor
@using System.Linq.Dynamic.Core
@using Blazor_mac2c.Models
@using Blazor_mac2c.Endpoint
@using Blazor_mac2c.Contracts
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Blazorise.Charts
@using Blazorise.Charts.Streaming
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navManager
@inject IPageProgressService PageProgressService
@inject ISensorUniqueRepository _sensorUnique
@inject IStatusDurationRepository _statusDuration
@inject IStatusRepository _status
@inject IStatusGroupDurationRepository _statusGroupDuration
@inject ILogDurationRepository _logDuration
@inject IActivityReportRepository _activityReport
@inject IJSRuntime JsRuntime
@inject HttpClient client


@inject IJSRuntime JsRuntime
@inject HttpClient client
    <div class="container"style="background-color:rgba(220,220,220,0.3);">

        <div class="row px-3">
            <div class="col-md-6 col-lg-6 col-xl-3 p-3">

                <div class="bg-warning">
                <RadzenCard>
                    <h4 class="mb-4">Start</h4>
                    <RadzenDatePicker @bind-Value=@startTime DateFormat="yyyy-MM-dd HH:mm:ss" ShowTime="true" Change=@(args => OnTimeChange(args, "StartDatePicker", "MM/dd/yyyy")) Class="w-100" />
                </RadzenCard>
                </div>

            </div>

            <div class="col-md-6 col-lg-6 col-xl-3 p-3">

                <RadzenCard>
                    <h4 class="mb-4">End</h4>
                    <RadzenDatePicker @bind-Value=@endTime DateFormat="yyyy-MM-dd HH:mm:ss" ShowTime="true" Change=@(args => OnTimeChange(args, "EndDatePicker", "MM/dd/yyyy")) Class="w-100" />
                </RadzenCard>
            </div>
            <div class="col-md-6 col-lg-6 col-xl-3 p-3">

                <RadzenCard>
                    <h4 class="mb-4">From</h4>
                    <RadzenDatePicker  @bind-Value=@scheduleStart ShowTime="true" TimeOnly="true" DateFormat="HH:mm"  Change=@(args => OnTimeChange(args, "scheduleStartPicker", "HH:mm")) Class="w-100" />
                </RadzenCard>
            </div>
            <div class="col-md-6 col-lg-6 col-xl-3 p-3">

                <RadzenCard>
                    <h4 class="mb-4">To</h4>
                    <RadzenDatePicker @bind-Value=@scheduleEnd ShowTime="true" TimeOnly="true" DateFormat="HH:mm"  Change=@(args => OnTimeChange(args, "scheduleEndPicker", "HH:mm")) Class="w-100" />
                </RadzenCard>
            </div>
        </div>

        <div class="row">
            <div class="col-xl-12">
                <RadzenFieldset AllowCollapse="true" Style=" margin: 10px auto;border-radius:10px;">
                    <HeaderTemplate>
                        <span class="d-inline-flex align-items-center align-middle">
                            <b>Activity categories</b>
                        </span>
                    </HeaderTemplate>                        
                    <ChildContent>
                        <Container>
                            <RadzenButton ButtonStyle="ButtonStyle.Info"  Text="View data" Click="@ClickCalenderValidate" Class="w-100" BusyText="Invoking ..." IsBusy=@busy  />
                            <svg class="w-100" id="statusCategoryHorizontal_chart"/>           
                        </Container>
                    </ChildContent>
                    <SummaryTemplate>
                        <RadzenCard class="mt-3">
                  
                            <RadzenButton ButtonStyle="ButtonStyle.Info"  Text="Refresh data" Click="@ClickCalenderValidate" Class="w-100" BusyText="Invoking ..." IsBusy=@busy  />
                        
                            <b>Activity categories</b>
                            <ul>                               
                                @if(StatusGroupDurationData!=null)
                                {                               
                                    @foreach (StatusGroupDurationModel item in StatusGroupDurationDataSorted)
                                        {
                                            
                                            <li>@item.Name : @(Math.Round((item.Duration/ CalculateTotalSecond())*100, 2))%</li>
                                        }
                                }
                            </ul>
                        </RadzenCard>
                    </SummaryTemplate>
                </RadzenFieldset>
            </div>
        </div>
    </div>


@code {
    protected bool showValue = true;
    protected IEnumerable<StatusGroupDurationModel> StatusGroupDurationData;
    protected IEnumerable<StatusGroupDurationModel> StatusGroupDurationDataSorted;


    protected bool busy;
    protected DateTime startTime = DateTime.Now.AddDays(-1);
    protected DateTime endTime = DateTime.Now;
    protected double seconds = 0;
    protected DateTime scheduleStart = new DateTime(2020, 01, 01,00,00,00);
    protected DateTime scheduleEnd =new DateTime(2020, 01, 01, 23,00,00);
    protected string startTimeString;
    protected string endTimeString;
    protected string scheduleStartString;
    protected string scheduleEndString;
    protected double totalSecond;

    protected async Task OnTimeChange(DateTime? value, string name, string format)
    {
        SetCalenderValues();
    }
    #region loading
    protected Task SetPageProgressIndeterminate()
    {
        return PageProgressService.Go(null, options => { options.Color = Color.Warning; });
    }
    protected Task SetPageProgressHidden()
    {
        return PageProgressService.Go(-1);
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        totalSecond = 0;

        seconds = (endTime - startTime).TotalSeconds;
        SetPageProgressIndeterminate();
        SetCalenderValues();


        await GetStatusDuartionValues();

        UpdateStatusChart();
        SetPageProgressHidden();
    }
    protected override async Task OnParametersSetAsync()
    {
        totalSecond = 0;

        seconds = (endTime - startTime).TotalSeconds;
        SetPageProgressIndeterminate();
        SetCalenderValues();


        await GetStatusDuartionValues();

        UpdateStatusChart();
   
        SetPageProgressHidden();
    }
    protected async Task ClickCalenderValidate()
    {
        totalSecond = 0;

        busy = true;
        seconds = (endTime - startTime).TotalSeconds;

        SetPageProgressIndeterminate();
        SetCalenderValues();


        await GetStatusDuartionValues();
        UpdateStatusChart();



        SetPageProgressHidden();
        busy = false;

    }
    protected async Task GetStatusDuartionValues()
    {
        StatusGroupDurationData= await _statusGroupDuration.GetStatusGroupDuration(Endpoint.StatusGroupDurationEndpoint + $"?{startTimeString}&{endTimeString}&{scheduleStartString}&{scheduleEndString}");  
        if(StatusGroupDurationData !=null)
        StatusGroupDurationDataSorted=        StatusGroupDurationData.OrderByDescending(s => s.Duration);
    }

    protected double CalculateTotalSecond()
    {
        totalSecond = 0;
        foreach(StatusGroupDurationModel item in StatusGroupDurationData)
        {
            totalSecond = totalSecond + item.Duration;
        }
        return totalSecond;
    }
    protected async Task UpdateStatusChart()
    {
        
        JsRuntime.InvokeVoidAsync("cleanStatusGroupHorizontalChartChildren");
        JsRuntime.InvokeVoidAsync("drawStatusGroupHorizontalChart", StatusGroupDurationData);
    }
    protected async Task SetCalenderValues()
    {
        startTimeString = "start=" + startTime.ToString("yyyy-MM-dd HH:mm:ss");
        endTimeString = "end=" + endTime.ToString("yyyy-MM-dd HH:mm:ss");
        scheduleStartString = "scheduleStart=" + scheduleStart.ToString("HH:mm:ss");
        scheduleEndString = "scheduleEnd=" + scheduleEnd.ToString("HH:mm:ss");
    }
}

