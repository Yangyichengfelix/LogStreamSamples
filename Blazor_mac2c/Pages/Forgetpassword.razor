@page "/forgetpassword"
@using System.Globalization
@using System.Net.Http
@using Radzen
@using Radzen.Blazor
@using System.Linq.Dynamic.Core
@using Blazor_mac2c.Models
@using Blazor_mac2c.Endpoint
@using Blazor_mac2c.Contracts
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager
@inject NotificationService NotificationService
@inject IPageProgressService PageProgressService
<h3>Find my password</h3>

@if (!response)
{
    <ErrorMessage Message="Email entered has not been registed" />
}
<div class="container my-4">
   
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <RadzenTemplateForm TItem="Model" Data=@model Submit=@ForgotPasswordHandle InvalidSubmit=@OnInvalidSubmit>
                <RadzenFieldset Text="Enter email">
                    <div class="row mb-5">
                        <div class="col-md-4" style="align-self: center;">
                            <RadzenLabel Text="Email" />
                        </div>
                        <div class="col">
                            <RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email Class="w-100" />
                            <RadzenRequiredValidator Component="Email" Text="Email is required" Popup="true" Style="position: absolute" />
                            <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup="true" Style="position: absolute" />
                            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.EmailConfirm)) Value=@model.Email Component="Confirm Email" Text="Email should be the same" Popup="true" Style="position: absolute" />
                        </div>
                    </div>
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Submit" Class="w-100" BusyText="Invoking ..." IsBusy=@busy ButtonStyle="ButtonStyle.Info" />
                </RadzenFieldset>
            </RadzenTemplateForm>
        </div>
    </div>
</div>
@code {
    protected class Model
    {
        public string Email { get; set; }
        public string EmailConfirm { get; set; }
    }
    protected bool busy;


    protected Model model = new Model();
    protected ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();
    protected bool response = true;



    protected void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine("InvalidSubmit", JsonSerializer.Serialize(args, new JsonSerializerOptions() {  WriteIndented = true }));
    }
    protected async Task ForgotPasswordHandle()
    {
        busy = true;
        SetPageProgressIndeterminate();
        forgotPasswordModel.UserName = model.Email;
        response = await _authRepo.ForgotPassword(forgotPasswordModel);
        if (response)
        {

            busy = false ;
            SetPageProgressHidden();
            NavigateToResetPage();
        }        
        else
        {
            NotificationMessage failure = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Something wrong when trying to verify email of {forgotPasswordModel.UserName} ",
                    Detail = $"Something wrong when trying to verify email of {forgotPasswordModel.UserName}, please verify your form ",
                    Duration = 4000
                };
            NotificationService.Notify(failure);
            busy = false ;
            SetPageProgressHidden();
        }
    }
    protected void NavigateToResetPage()
    {
        _navManager.NavigateTo("/resetforgottenpassword");
    }
    #region loading
    protected Task SetPageProgressIndeterminate()
    {
        return PageProgressService.Go(null, options => { options.Color = Color.Warning; });
    }
    protected Task SetPageProgressHidden()
    {
        return PageProgressService.Go(-1);
    }
    #endregion
}
