// <auto-generated />
using System;
using Mac2sAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mac2sAPI.Migrations
{
    [DbContext(typeof(Mac2sAPIDbContext))]
    partial class Mac2sAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mac2sAPI.Data.ActivityReport", b =>
                {
                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grp")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.ToView("ActivityReport");
                });

            modelBuilder.Entity("Mac2sAPI.Data.GaugeParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Breakpoint1")
                        .HasColumnType("integer");

                    b.Property<int>("Breakpoint2")
                        .HasColumnType("integer");

                    b.Property<int>("EndAngle")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartAngle")
                        .HasColumnType("integer");

                    b.Property<int>("step")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GaugeParameter");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Abs_Val_PL")
                        .HasColumnType("real");

                    b.Property<double?>("Abs_Val_S1_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S2_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S3_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S4_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S5_microm")
                        .HasColumnType("double precision");

                    b.Property<int?>("CycleTime_s")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date_Heure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Hi_Tol_S1")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S2")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S3")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S4")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S5")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S1")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S2")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S3")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S4")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S5")
                        .HasColumnType("real");

                    b.Property<int?>("NOK")
                        .HasColumnType("integer");

                    b.Property<int?>("Nr_Cycle")
                        .HasColumnType("integer");

                    b.Property<string>("Nr_Moule")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Part_Pr")
                        .HasColumnType("text");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("RunTime_h")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Mac2sAPI.Data.LogDuration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Abs_Val_PL")
                        .HasColumnType("real");

                    b.Property<double?>("Abs_Val_S1_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S2_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S3_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S4_microm")
                        .HasColumnType("double precision");

                    b.Property<double?>("Abs_Val_S5_microm")
                        .HasColumnType("double precision");

                    b.Property<int?>("CycleTime_s")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date_Heure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric");

                    b.Property<float?>("Hi_Tol_S1")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S2")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S3")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S4")
                        .HasColumnType("real");

                    b.Property<float?>("Hi_Tol_S5")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S1")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S2")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S3")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S4")
                        .HasColumnType("real");

                    b.Property<float?>("Lo_Tol_S5")
                        .HasColumnType("real");

                    b.Property<int?>("NOK")
                        .HasColumnType("integer");

                    b.Property<int?>("Nr_Cycle")
                        .HasColumnType("integer");

                    b.Property<string>("Nr_Moule")
                        .HasColumnType("text");

                    b.Property<int?>("Part_Pr")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("RunTime_h")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("StatusId");

                    b.ToView("LogDuration");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Mold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameIMM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Nb_piece")
                        .HasColumnType("integer");

                    b.Property<string>("Nr_Moule")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float?>("Ref_S1")
                        .HasColumnType("real");

                    b.Property<float?>("Ref_S2")
                        .HasColumnType("real");

                    b.Property<float?>("Ref_S3")
                        .HasColumnType("real");

                    b.Property<float?>("Ref_S4")
                        .HasColumnType("real");

                    b.Property<float?>("Ref_S5")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Mold");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int?>("MoldId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("MoldId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Mac2sAPI.Data.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Color")
                        .HasColumnType("integer");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<int>("ObjectifNumber")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductionOrder");
                });

            modelBuilder.Entity("Mac2sAPI.Data.ScheduleParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("End")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ScheduleParameter");
                });

            modelBuilder.Entity("Mac2sAPI.Data.SensorGlobal", b =>
                {
                    b.Property<DateTime>("Date_Heure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("TH1")
                        .HasColumnType("real");

                    b.Property<float?>("TH2")
                        .HasColumnType("real");

                    b.Property<float?>("TH3")
                        .HasColumnType("real");

                    b.Property<float?>("TH4")
                        .HasColumnType("real");

                    b.Property<float?>("TH5")
                        .HasColumnType("real");

                    b.Property<float?>("TL1")
                        .HasColumnType("real");

                    b.Property<float?>("TL2")
                        .HasColumnType("real");

                    b.Property<float?>("TL3")
                        .HasColumnType("real");

                    b.Property<float?>("TL4")
                        .HasColumnType("real");

                    b.Property<float?>("TL5")
                        .HasColumnType("real");

                    b.Property<double?>("V1")
                        .HasColumnType("double precision");

                    b.Property<double?>("V2")
                        .HasColumnType("double precision");

                    b.Property<double?>("V3")
                        .HasColumnType("double precision");

                    b.Property<double?>("V4")
                        .HasColumnType("double precision");

                    b.Property<double?>("V5")
                        .HasColumnType("double precision");

                    b.Property<double?>("Vp")
                        .HasColumnType("double precision");

                    b.ToView("SensorGlobal");
                });

            modelBuilder.Entity("Mac2sAPI.Data.SensorPl", b =>
                {
                    b.Property<DateTime>("Date_Heure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.ToView("SensorPl");
                });

            modelBuilder.Entity("Mac2sAPI.Data.SensorUnique", b =>
                {
                    b.Property<DateTime>("Date_Heure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("High")
                        .HasColumnType("real");

                    b.Property<float?>("Low")
                        .HasColumnType("real");

                    b.Property<string>("Nr_Moule")
                        .HasColumnType("text");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.ToView("SensorUnique");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusGroupId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Mac2sAPI.Data.StatusDuration", b =>
                {
                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToView("StatusDuration");
                });

            modelBuilder.Entity("Mac2sAPI.Data.StatusGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusGroup");
                });

            modelBuilder.Entity("Mac2sAPI.Data.StatusGroupDuration", b =>
                {
                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToView("StatusGroupDuration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b5a136a0-dc53-4e4e-b5e0-68d10b70fe02",
                            ConcurrencyStamp = "179b8683-54b0-4ae0-a17e-2f274afbeb63",
                            Name = "Monitor",
                            NormalizedName = "MONITEUR"
                        },
                        new
                        {
                            Id = "d9e1208e-5301-4fc9-8db0-f2562714a991",
                            ConcurrencyStamp = "5f18f7a1-916b-497f-92c3-54aade6dcfb8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "43c38655-9aa0-48b4-aab1-7cd175500f09",
                            RoleId = "d9e1208e-5301-4fc9-8db0-f2562714a991"
                        },
                        new
                        {
                            UserId = "5bda2409-9516-4983-90a3-08363427e744",
                            RoleId = "b5a136a0-dc53-4e4e-b5e0-68d10b70fe02"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mac2sAPI.Data.ApiUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ApiUser");

                    b.HasData(
                        new
                        {
                            Id = "43c38655-9aa0-48b4-aab1-7cd175500f09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "453b1a09-1ed0-437f-bf0a-29ba9ec72b07",
                            Email = "yicheng.yang@ermo-tech.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "YICHENG.YANG@ERMO-TECH.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtV17ZZK2I8DK5r0o5nRHm77mW1NqOf4yTaQ1AeEAba1iYI1a27FztFqtxO8cwyRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72330525-2195-45b9-9221-0066cb7c5641",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            FirstName = "System",
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = "5bda2409-9516-4983-90a3-08363427e744",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22850611-1679-4bfd-928c-abe7d8e46ad4",
                            Email = "user@ermo-tech.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@ERMO-TECH.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAENi6F/z7DiIBdgEy1tx3O2iBueVT6QpyGvRZJc4eam7jPqTkpp6w57BUNfR0hyYk5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72c27ffb-a882-4cf3-924b-54d25664b77f",
                            TwoFactorEnabled = false,
                            UserName = "user",
                            FirstName = "System",
                            LastName = "User"
                        });
                });

            modelBuilder.Entity("Mac2sAPI.Data.Log", b =>
                {
                    b.HasOne("Mac2sAPI.Data.ProductionOrder", "ProductionOrder")
                        .WithMany("Logs")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mac2sAPI.Data.Status", "Status")
                        .WithMany("Logs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Mac2sAPI.Data.LogDuration", b =>
                {
                    b.HasOne("Mac2sAPI.Data.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("Mac2sAPI.Data.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Product", b =>
                {
                    b.HasOne("Mac2sAPI.Data.Image", "Image")
                        .WithMany("Products")
                        .HasForeignKey("ImageId");

                    b.HasOne("Mac2sAPI.Data.Mold", "Mold")
                        .WithMany("Products")
                        .HasForeignKey("MoldId");

                    b.Navigation("Image");

                    b.Navigation("Mold");
                });

            modelBuilder.Entity("Mac2sAPI.Data.ProductionOrder", b =>
                {
                    b.HasOne("Mac2sAPI.Data.Product", "Product")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Status", b =>
                {
                    b.HasOne("Mac2sAPI.Data.StatusGroup", "StatusGroup")
                        .WithMany("Statuss")
                        .HasForeignKey("StatusGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mac2sAPI.Data.Image", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Mold", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Product", b =>
                {
                    b.Navigation("ProductionOrders");
                });

            modelBuilder.Entity("Mac2sAPI.Data.ProductionOrder", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Mac2sAPI.Data.Status", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Mac2sAPI.Data.StatusGroup", b =>
                {
                    b.Navigation("Statuss");
                });
#pragma warning restore 612, 618
        }
    }
}
